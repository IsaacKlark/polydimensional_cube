const SnubDodecahedronVertices = (
  dimensions,
  DimensionOfFigure,
  setVerticesArray,
  scale,
  setOriginalVerticesArray
) => {
  let copyDimensionOfFigure = DimensionOfFigure > 3 ? 3 : DimensionOfFigure;
  if (+DimensionOfFigure > +dimensions) copyDimensionOfFigure = dimensions;

  const baseGroup1 = [
    [1.602825211501061, 3.184148690850219, 3.506016037603566],
    [-0.329085394982827, 3.970937601508473, 3.020489590734735],
    [-1.805367588116225, 2.650791538416516, 3.835876965133413],
    [-0.785849553975108, 1.048107490653142, 4.825340523378082],
    [1.320529436401028, 1.377740339000015, 4.621475258604114],
    [-1.599998388686729, -3.186974374314469, 3.504739575726565],
    [0.331519793555144, -3.973371018897161, 3.017021274812237],
    [1.808459483951009, -2.653882188063599, 3.832281778103819],
    [0.789740229707502, -1.051996598249855, 4.823858779737808],
    [-1.316802584804775, -1.381465688489862, 4.621426565918625],
    [3.506016037603466, 1.602825211501682, 3.184148690850367],
    [3.020489590734616, -0.329085394982151, 3.970937601508637],
    [3.835876965133323, -1.805367588115574, 2.650791538416684],
    [4.825340523378001, -0.785849553974389, 1.048107490653263],
    [4.621475258603965, 1.320529436401735, 1.377740339000187],
    [3.184148690849855, 3.506016037603805, 1.602825211501482],
    [3.970937601508089, 3.02048959073504, -0.329085394982324],
    [2.650791538416168, 3.835876965133639, -1.80536758811579],
    [1.04810749065273, 4.825340523378315, -0.785849553974666],
    [1.377740338999595, 4.621475258604343, 1.320529436401473],
    [-2.653882188063983, 3.832281778103595, 1.808459483950863],
    [-1.051996598250256, 4.823858779737593, 0.789740229707389],
    [-1.381465688490249, 4.621426565918415, -1.316802584804894],
    [-3.186974374314797, 3.50473957572636, -1.599998388686877],
    [-3.973371018897559, 3.017021274811917, 0.331519793554928],
    [-3.833737468311953, 1.803228953617653, 2.655338465223683],
    [-4.824493479580695, 0.785002851577623, 1.052631554011277],
    [-4.620363141786194, -1.321641104981353, 1.380401835571512],
    [-3.503447643625473, -1.605392570289327, 3.185681921290251],
    [-3.017286240995164, 0.325883336351753, 3.973636091917486],
    [-1.806320849452739, -2.65224781557672, -3.834421274925405],
    [-0.788893527310425, -1.048742446414694, -4.824705823535325],
    [1.317914253384698, -1.376676486081802, -4.622538682736611],
    [1.602565747474703, -3.182856237826131, -3.507307969704765],
    [-0.32831773492433, -3.971202674528926, -3.020224624551894],
    [2.655338465224205, -3.833737468311607, 1.803228953618044],
    [1.052631554011864, -4.824493479580353, 0.785002851578109],
    [1.38040183557203, -4.620363141785922, -1.321641104980883],
    [3.185681921290739, -3.503447643625163, -1.605392570288957],
    [3.973636091918031, -3.017286240994749, 0.3258833363521],
    [3.504739575726652, -1.599998388686465, -3.186974374314298],
    [3.017021274812318, 0.33151979355534, -3.973371018897008],
    [3.832281778103925, 1.808459483951276, -2.653882188063446],
    [4.823858779737887, 0.789740229707876, -1.051996598249658],
    [4.621426565918773, -1.316802584804404, -1.381465688489716],
    [-1.605392570289003, 3.185681921290386, -3.503447643625405],
    [0.325883336352016, 3.973636091917621, -3.01728624099507],
    [1.803228953617978, 2.655338465223804, -3.833737468311862],
    [0.785002851578017, 1.052631554011397, -4.824493479580601],
    [-1.321641104980963, 1.380401835571639, -4.620363141786164],
    [-3.8344212749253, -1.80632084945334, -2.652247815576859],
    [-4.824705823535198, -0.788893527311118, -1.048742446414835],
    [-4.622538682736549, 1.317914253384014, -1.376676486081935],
    [-3.507307969704643, 1.60256574747413, -3.182856237826262],
    [-3.020224624551803, -0.328317734924942, -3.971202674529057],
    [-2.652247815576376, -3.834421274925628, -1.806320849453141],
    [-1.048742446414339, -4.824705823535555, -0.78889352731081],
    [-1.376676486081377, -4.622538682736835, 1.317914253384322],
    [-3.182856237825777, -3.507307969705002, 1.60256574747432],
    [-3.971202674528543, -3.020224624552228, -0.328317734924743],
  ].map((arr) => arr.map((number) => number * 30));

  let vertices = baseGroup1;

  if (+dimensions > +copyDimensionOfFigure) {
    vertices = vertices.map((arr) => {
      for (let i = +copyDimensionOfFigure + 1; i <= +dimensions; i++) {
        arr.push(0);
      }
      return arr;
    });
  }

  if (+DimensionOfFigure < 3) {
    vertices = vertices.map((el) => el.slice(0, 2));
  }
  setOriginalVerticesArray(vertices);
  vertices = vertices.map((arr) => arr.map((item) => item * scale));
  setVerticesArray(vertices);
};

export default SnubDodecahedronVertices;
