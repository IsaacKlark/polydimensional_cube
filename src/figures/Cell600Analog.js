import React, { useEffect, useMemo } from "react";
import {
  linesArray as _linesArray,
  setLinesArray,
  modified,
  polygonsArray,
  setPolygonsArray,
} from "../vertices";

let polygons = [
  [0, 31, 39],
  [0, 31, 47],
  [0, 31, 63],
  [0, 31, 79],
  [0, 31, 95],
  [0, 39, 47],
  [0, 39, 71],
  [0, 39, 95],
  [0, 39, 103],
  [0, 47, 79],
  [0, 47, 103],
  [0, 47, 111],
  [0, 55, 63],
  [0, 55, 79],
  [0, 55, 87],
  [0, 55, 111],
  [0, 55, 119],
  [0, 63, 79],
  [0, 63, 87],
  [0, 63, 95],
  [0, 71, 87],
  [0, 71, 95],
  [0, 71, 103],
  [0, 71, 119],
  [0, 79, 111],
  [0, 87, 95],
  [0, 87, 119],
  [0, 103, 111],
  [0, 103, 119],
  [0, 111, 119],
  [1, 24, 32],
  [1, 24, 40],
  [1, 24, 56],
  [1, 24, 72],
  [1, 24, 88],
  [1, 32, 40],
  [1, 32, 64],
  [1, 32, 88],
  [1, 32, 96],
  [1, 40, 72],
  [1, 40, 96],
  [1, 40, 104],
  [1, 48, 56],
  [1, 48, 72],
  [1, 48, 80],
  [1, 48, 104],
  [1, 48, 112],
  [1, 56, 72],
  [1, 56, 80],
  [1, 56, 88],
  [1, 64, 80],
  [1, 64, 88],
  [1, 64, 96],
  [1, 64, 112],
  [1, 72, 104],
  [1, 80, 88],
  [1, 80, 112],
  [1, 96, 104],
  [1, 96, 112],
  [1, 104, 112],
  [2, 24, 32],
  [2, 24, 40],
  [2, 24, 57],
  [2, 24, 73],
  [2, 24, 89],
  [2, 32, 40],
  [2, 32, 65],
  [2, 32, 89],
  [2, 32, 97],
  [2, 40, 73],
  [2, 40, 97],
  [2, 40, 105],
  [2, 49, 57],
  [2, 49, 73],
  [2, 49, 81],
  [2, 49, 105],
  [2, 49, 113],
  [2, 57, 73],
  [2, 57, 81],
  [2, 57, 89],
  [2, 65, 81],
  [2, 65, 89],
  [2, 65, 97],
  [2, 65, 113],
  [2, 73, 105],
  [2, 81, 89],
  [2, 81, 113],
  [2, 97, 105],
  [2, 97, 113],
  [2, 105, 113],
  [3, 25, 33],
  [3, 25, 41],
  [3, 25, 56],
  [3, 25, 72],
  [3, 25, 90],
  [3, 33, 41],
  [3, 33, 66],
  [3, 33, 90],
  [3, 33, 98],
  [3, 41, 72],
  [3, 41, 98],
  [3, 41, 106],
  [3, 48, 56],
  [3, 48, 72],
  [3, 48, 82],
  [3, 48, 106],
  [3, 48, 114],
  [3, 56, 72],
  [3, 56, 82],
  [3, 56, 90],
  [3, 66, 82],
  [3, 66, 90],
  [3, 66, 98],
  [3, 66, 114],
  [3, 72, 106],
  [3, 82, 90],
  [3, 82, 114],
  [3, 98, 106],
  [3, 98, 114],
  [3, 106, 114],
  [4, 26, 34],
  [4, 26, 42],
  [4, 26, 58],
  [4, 26, 74],
  [4, 26, 88],
  [4, 34, 42],
  [4, 34, 64],
  [4, 34, 88],
  [4, 34, 100],
  [4, 42, 74],
  [4, 42, 100],
  [4, 42, 108],
  [4, 50, 58],
  [4, 50, 74],
  [4, 50, 80],
  [4, 50, 108],
  [4, 50, 116],
  [4, 58, 74],
  [4, 58, 80],
  [4, 58, 88],
  [4, 64, 80],
  [4, 64, 88],
  [4, 64, 100],
  [4, 64, 116],
  [4, 74, 108],
  [4, 80, 88],
  [4, 80, 116],
  [4, 100, 108],
  [4, 100, 116],
  [4, 108, 116],
  [5, 28, 36],
  [5, 28, 44],
  [5, 28, 60],
  [5, 28, 76],
  [5, 28, 92],
  [5, 36, 44],
  [5, 36, 68],
  [5, 36, 92],
  [5, 36, 96],
  [5, 44, 76],
  [5, 44, 96],
  [5, 44, 104],
  [5, 52, 60],
  [5, 52, 76],
  [5, 52, 84],
  [5, 52, 104],
  [5, 52, 112],
  [5, 60, 76],
  [5, 60, 84],
  [5, 60, 92],
  [5, 68, 84],
  [5, 68, 92],
  [5, 68, 96],
  [5, 68, 112],
  [5, 76, 104],
  [5, 84, 92],
  [5, 84, 112],
  [5, 96, 104],
  [5, 96, 112],
  [5, 104, 112],
  [6, 25, 33],
  [6, 25, 41],
  [6, 25, 57],
  [6, 25, 73],
  [6, 25, 91],
  [6, 33, 41],
  [6, 33, 67],
  [6, 33, 91],
  [6, 33, 99],
  [6, 41, 73],
  [6, 41, 99],
  [6, 41, 107],
  [6, 49, 57],
  [6, 49, 73],
  [6, 49, 83],
  [6, 49, 107],
  [6, 49, 115],
  [6, 57, 73],
  [6, 57, 83],
  [6, 57, 91],
  [6, 67, 83],
  [6, 67, 91],
  [6, 67, 99],
  [6, 67, 115],
  [6, 73, 107],
  [6, 83, 91],
  [6, 83, 115],
  [6, 99, 107],
  [6, 99, 115],
  [6, 107, 115],
  [7, 26, 34],
  [7, 26, 42],
  [7, 26, 59],
  [7, 26, 75],
  [7, 26, 89],
  [7, 34, 42],
  [7, 34, 65],
  [7, 34, 89],
  [7, 34, 101],
  [7, 42, 75],
  [7, 42, 101],
  [7, 42, 109],
  [7, 51, 59],
  [7, 51, 75],
  [7, 51, 81],
  [7, 51, 109],
  [7, 51, 117],
  [7, 59, 75],
  [7, 59, 81],
  [7, 59, 89],
  [7, 65, 81],
  [7, 65, 89],
  [7, 65, 101],
  [7, 65, 117],
  [7, 75, 109],
  [7, 81, 89],
  [7, 81, 117],
  [7, 101, 109],
  [7, 101, 117],
  [7, 109, 117],
  [8, 27, 35],
  [8, 27, 43],
  [8, 27, 58],
  [8, 27, 74],
  [8, 27, 90],
  [8, 35, 43],
  [8, 35, 66],
  [8, 35, 90],
  [8, 35, 102],
  [8, 43, 74],
  [8, 43, 102],
  [8, 43, 110],
  [8, 50, 58],
  [8, 50, 74],
  [8, 50, 82],
  [8, 50, 110],
  [8, 50, 118],
  [8, 58, 74],
  [8, 58, 82],
  [8, 58, 90],
  [8, 66, 82],
  [8, 66, 90],
  [8, 66, 102],
  [8, 66, 118],
  [8, 74, 110],
  [8, 82, 90],
  [8, 82, 118],
  [8, 102, 110],
  [8, 102, 118],
  [8, 110, 118],
  [9, 28, 36],
  [9, 28, 44],
  [9, 28, 61],
  [9, 28, 77],
  [9, 28, 93],
  [9, 36, 44],
  [9, 36, 69],
  [9, 36, 93],
  [9, 36, 97],
  [9, 44, 77],
  [9, 44, 97],
  [9, 44, 105],
  [9, 53, 61],
  [9, 53, 77],
  [9, 53, 85],
  [9, 53, 105],
  [9, 53, 113],
  [9, 61, 77],
  [9, 61, 85],
  [9, 61, 93],
  [9, 69, 85],
  [9, 69, 93],
  [9, 69, 97],
  [9, 69, 113],
  [9, 77, 105],
  [9, 85, 93],
  [9, 85, 113],
  [9, 97, 105],
  [9, 97, 113],
  [9, 105, 113],
  [10, 29, 37],
  [10, 29, 45],
  [10, 29, 60],
  [10, 29, 76],
  [10, 29, 94],
  [10, 37, 45],
  [10, 37, 70],
  [10, 37, 94],
  [10, 37, 98],
  [10, 45, 76],
  [10, 45, 98],
  [10, 45, 106],
  [10, 52, 60],
  [10, 52, 76],
  [10, 52, 86],
  [10, 52, 106],
  [10, 52, 114],
  [10, 60, 76],
  [10, 60, 86],
  [10, 60, 94],
  [10, 70, 86],
  [10, 70, 94],
  [10, 70, 98],
  [10, 70, 114],
  [10, 76, 106],
  [10, 86, 94],
  [10, 86, 114],
  [10, 98, 106],
  [10, 98, 114],
  [10, 106, 114],
  [11, 30, 38],
  [11, 30, 46],
  [11, 30, 62],
  [11, 30, 78],
  [11, 30, 92],
  [11, 38, 46],
  [11, 38, 68],
  [11, 38, 92],
  [11, 38, 100],
  [11, 46, 78],
  [11, 46, 100],
  [11, 46, 108],
  [11, 54, 62],
  [11, 54, 78],
  [11, 54, 84],
  [11, 54, 108],
  [11, 54, 116],
  [11, 62, 78],
  [11, 62, 84],
  [11, 62, 92],
  [11, 68, 84],
  [11, 68, 92],
  [11, 68, 100],
  [11, 68, 116],
  [11, 78, 108],
  [11, 84, 92],
  [11, 84, 116],
  [11, 100, 108],
  [11, 100, 116],
  [11, 108, 116],
  [12, 27, 35],
  [12, 27, 43],
  [12, 27, 59],
  [12, 27, 75],
  [12, 27, 91],
  [12, 35, 43],
  [12, 35, 67],
  [12, 35, 91],
  [12, 35, 103],
  [12, 43, 75],
  [12, 43, 103],
  [12, 43, 111],
  [12, 51, 59],
  [12, 51, 75],
  [12, 51, 83],
  [12, 51, 111],
  [12, 51, 119],
  [12, 59, 75],
  [12, 59, 83],
  [12, 59, 91],
  [12, 67, 83],
  [12, 67, 91],
  [12, 67, 103],
  [12, 67, 119],
  [12, 75, 111],
  [12, 83, 91],
  [12, 83, 119],
  [12, 103, 111],
  [12, 103, 119],
  [12, 111, 119],
  [13, 29, 37],
  [13, 29, 45],
  [13, 29, 61],
  [13, 29, 77],
  [13, 29, 95],
  [13, 37, 45],
  [13, 37, 71],
  [13, 37, 95],
  [13, 37, 99],
  [13, 45, 77],
  [13, 45, 99],
  [13, 45, 107],
  [13, 53, 61],
  [13, 53, 77],
  [13, 53, 87],
  [13, 53, 107],
  [13, 53, 115],
  [13, 61, 77],
  [13, 61, 87],
  [13, 61, 95],
  [13, 71, 87],
  [13, 71, 95],
  [13, 71, 99],
  [13, 71, 115],
  [13, 77, 107],
  [13, 87, 95],
  [13, 87, 115],
  [13, 99, 107],
  [13, 99, 115],
  [13, 107, 115],
  [14, 30, 38],
  [14, 30, 46],
  [14, 30, 63],
  [14, 30, 79],
  [14, 30, 93],
  [14, 38, 46],
  [14, 38, 69],
  [14, 38, 93],
  [14, 38, 101],
  [14, 46, 79],
  [14, 46, 101],
  [14, 46, 109],
  [14, 55, 63],
  [14, 55, 79],
  [14, 55, 85],
  [14, 55, 109],
  [14, 55, 117],
  [14, 63, 79],
  [14, 63, 85],
  [14, 63, 93],
  [14, 69, 85],
  [14, 69, 93],
  [14, 69, 101],
  [14, 69, 117],
  [14, 79, 109],
  [14, 85, 93],
  [14, 85, 117],
  [14, 101, 109],
  [14, 101, 117],
  [14, 109, 117],
  [15, 31, 39],
  [15, 31, 47],
  [15, 31, 62],
  [15, 31, 78],
  [15, 31, 94],
  [15, 39, 47],
  [15, 39, 70],
  [15, 39, 94],
  [15, 39, 102],
  [15, 47, 78],
  [15, 47, 102],
  [15, 47, 110],
  [15, 54, 62],
  [15, 54, 78],
  [15, 54, 86],
  [15, 54, 110],
  [15, 54, 118],
  [15, 62, 78],
  [15, 62, 86],
  [15, 62, 94],
  [15, 70, 86],
  [15, 70, 94],
  [15, 70, 102],
  [15, 70, 118],
  [15, 78, 110],
  [15, 86, 94],
  [15, 86, 118],
  [15, 102, 110],
  [15, 102, 118],
  [15, 110, 118],
  [16, 28, 29],
  [16, 28, 60],
  [16, 28, 61],
  [16, 28, 92],
  [16, 28, 93],
  [16, 29, 60],
  [16, 29, 61],
  [16, 29, 94],
  [16, 29, 95],
  [16, 30, 31],
  [16, 30, 62],
  [16, 30, 63],
  [16, 30, 92],
  [16, 30, 93],
  [16, 31, 62],
  [16, 31, 63],
  [16, 31, 94],
  [16, 31, 95],
  [16, 60, 62],
  [16, 60, 92],
  [16, 60, 94],
  [16, 61, 63],
  [16, 61, 93],
  [16, 61, 95],
  [16, 62, 92],
  [16, 62, 94],
  [16, 63, 93],
  [16, 63, 95],
  [16, 92, 93],
  [16, 94, 95],
  [17, 42, 46],
  [17, 42, 74],
  [17, 42, 75],
  [17, 42, 108],
  [17, 42, 109],
  [17, 43, 47],
  [17, 43, 74],
  [17, 43, 75],
  [17, 43, 110],
  [17, 43, 111],
  [17, 46, 78],
  [17, 46, 79],
  [17, 46, 108],
  [17, 46, 109],
  [17, 47, 78],
  [17, 47, 79],
  [17, 47, 110],
  [17, 47, 111],
  [17, 74, 75],
  [17, 74, 108],
  [17, 74, 110],
  [17, 75, 109],
  [17, 75, 111],
  [17, 78, 79],
  [17, 78, 108],
  [17, 78, 110],
  [17, 79, 109],
  [17, 79, 111],
  [17, 108, 110],
  [17, 109, 111],
  [18, 33, 35],
  [18, 33, 66],
  [18, 33, 67],
  [18, 33, 98],
  [18, 33, 99],
  [18, 35, 66],
  [18, 35, 67],
  [18, 35, 102],
  [18, 35, 103],
  [18, 37, 39],
  [18, 37, 70],
  [18, 37, 71],
  [18, 37, 98],
  [18, 37, 99],
  [18, 39, 70],
  [18, 39, 71],
  [18, 39, 102],
  [18, 39, 103],
  [18, 66, 70],
  [18, 66, 98],
  [18, 66, 102],
  [18, 67, 71],
  [18, 67, 99],
  [18, 67, 103],
  [18, 70, 98],
  [18, 70, 102],
  [18, 71, 99],
  [18, 71, 103],
  [18, 98, 99],
  [18, 102, 103],
  [19, 49, 53],
  [19, 49, 81],
  [19, 49, 83],
  [19, 49, 113],
  [19, 49, 115],
  [19, 51, 55],
  [19, 51, 81],
  [19, 51, 83],
  [19, 51, 117],
  [19, 51, 119],
  [19, 53, 85],
  [19, 53, 87],
  [19, 53, 113],
  [19, 53, 115],
  [19, 55, 85],
  [19, 55, 87],
  [19, 55, 117],
  [19, 55, 119],
  [19, 81, 83],
  [19, 81, 113],
  [19, 81, 117],
  [19, 83, 115],
  [19, 83, 119],
  [19, 85, 87],
  [19, 85, 113],
  [19, 85, 117],
  [19, 87, 115],
  [19, 87, 119],
  [19, 113, 117],
  [19, 115, 119],
  [20, 24, 25],
  [20, 24, 56],
  [20, 24, 57],
  [20, 24, 88],
  [20, 24, 89],
  [20, 25, 56],
  [20, 25, 57],
  [20, 25, 90],
  [20, 25, 91],
  [20, 26, 27],
  [20, 26, 58],
  [20, 26, 59],
  [20, 26, 88],
  [20, 26, 89],
  [20, 27, 58],
  [20, 27, 59],
  [20, 27, 90],
  [20, 27, 91],
  [20, 56, 58],
  [20, 56, 88],
  [20, 56, 90],
  [20, 57, 59],
  [20, 57, 89],
  [20, 57, 91],
  [20, 58, 88],
  [20, 58, 90],
  [20, 59, 89],
  [20, 59, 91],
  [20, 88, 89],
  [20, 90, 91],
  [21, 40, 44],
  [21, 40, 72],
  [21, 40, 73],
  [21, 40, 104],
  [21, 40, 105],
  [21, 41, 45],
  [21, 41, 72],
  [21, 41, 73],
  [21, 41, 106],
  [21, 41, 107],
  [21, 44, 76],
  [21, 44, 77],
  [21, 44, 104],
  [21, 44, 105],
  [21, 45, 76],
  [21, 45, 77],
  [21, 45, 106],
  [21, 45, 107],
  [21, 72, 73],
  [21, 72, 104],
  [21, 72, 106],
  [21, 73, 105],
  [21, 73, 107],
  [21, 76, 77],
  [21, 76, 104],
  [21, 76, 106],
  [21, 77, 105],
  [21, 77, 107],
  [21, 104, 106],
  [21, 105, 107],
  [22, 32, 34],
  [22, 32, 64],
  [22, 32, 65],
  [22, 32, 96],
  [22, 32, 97],
  [22, 34, 64],
  [22, 34, 65],
  [22, 34, 100],
  [22, 34, 101],
  [22, 36, 38],
  [22, 36, 68],
  [22, 36, 69],
  [22, 36, 96],
  [22, 36, 97],
  [22, 38, 68],
  [22, 38, 69],
  [22, 38, 100],
  [22, 38, 101],
  [22, 64, 68],
  [22, 64, 96],
  [22, 64, 100],
  [22, 65, 69],
  [22, 65, 97],
  [22, 65, 101],
  [22, 68, 96],
  [22, 68, 100],
  [22, 69, 97],
  [22, 69, 101],
  [22, 96, 97],
  [22, 100, 101],
  [23, 48, 52],
  [23, 48, 80],
  [23, 48, 82],
  [23, 48, 112],
  [23, 48, 114],
  [23, 50, 54],
  [23, 50, 80],
  [23, 50, 82],
  [23, 50, 116],
  [23, 50, 118],
  [23, 52, 84],
  [23, 52, 86],
  [23, 52, 112],
  [23, 52, 114],
  [23, 54, 84],
  [23, 54, 86],
  [23, 54, 116],
  [23, 54, 118],
  [23, 80, 82],
  [23, 80, 112],
  [23, 80, 116],
  [23, 82, 114],
  [23, 82, 118],
  [23, 84, 86],
  [23, 84, 112],
  [23, 84, 116],
  [23, 86, 114],
  [23, 86, 118],
  [23, 112, 116],
  [23, 114, 118],
  [24, 25, 56],
  [24, 25, 57],
  [24, 25, 72],
  [24, 25, 73],
  [24, 32, 40],
  [24, 32, 88],
  [24, 32, 89],
  [24, 40, 72],
  [24, 40, 73],
  [24, 56, 72],
  [24, 56, 88],
  [24, 57, 73],
  [24, 57, 89],
  [24, 72, 73],
  [24, 88, 89],
  [25, 33, 41],
  [25, 33, 90],
  [25, 33, 91],
  [25, 41, 72],
  [25, 41, 73],
  [25, 56, 72],
  [25, 56, 90],
  [25, 57, 73],
  [25, 57, 91],
  [25, 72, 73],
  [25, 90, 91],
  [26, 27, 58],
  [26, 27, 59],
  [26, 27, 74],
  [26, 27, 75],
  [26, 34, 42],
  [26, 34, 88],
  [26, 34, 89],
  [26, 42, 74],
  [26, 42, 75],
  [26, 58, 74],
  [26, 58, 88],
  [26, 59, 75],
  [26, 59, 89],
  [26, 74, 75],
  [26, 88, 89],
  [27, 35, 43],
  [27, 35, 90],
  [27, 35, 91],
  [27, 43, 74],
  [27, 43, 75],
  [27, 58, 74],
  [27, 58, 90],
  [27, 59, 75],
  [27, 59, 91],
  [27, 74, 75],
  [27, 90, 91],
  [28, 29, 60],
  [28, 29, 61],
  [28, 29, 76],
  [28, 29, 77],
  [28, 36, 44],
  [28, 36, 92],
  [28, 36, 93],
  [28, 44, 76],
  [28, 44, 77],
  [28, 60, 76],
  [28, 60, 92],
  [28, 61, 77],
  [28, 61, 93],
  [28, 76, 77],
  [28, 92, 93],
  [29, 37, 45],
  [29, 37, 94],
  [29, 37, 95],
  [29, 45, 76],
  [29, 45, 77],
  [29, 60, 76],
  [29, 60, 94],
  [29, 61, 77],
  [29, 61, 95],
  [29, 76, 77],
  [29, 94, 95],
  [30, 31, 62],
  [30, 31, 63],
  [30, 31, 78],
  [30, 31, 79],
  [30, 38, 46],
  [30, 38, 92],
  [30, 38, 93],
  [30, 46, 78],
  [30, 46, 79],
  [30, 62, 78],
  [30, 62, 92],
  [30, 63, 79],
  [30, 63, 93],
  [30, 78, 79],
  [30, 92, 93],
  [31, 39, 47],
  [31, 39, 94],
  [31, 39, 95],
  [31, 47, 78],
  [31, 47, 79],
  [31, 62, 78],
  [31, 62, 94],
  [31, 63, 79],
  [31, 63, 95],
  [31, 78, 79],
  [31, 94, 95],
  [32, 34, 64],
  [32, 34, 65],
  [32, 34, 88],
  [32, 34, 89],
  [32, 40, 96],
  [32, 40, 97],
  [32, 64, 88],
  [32, 64, 96],
  [32, 65, 89],
  [32, 65, 97],
  [32, 88, 89],
  [32, 96, 97],
  [33, 35, 66],
  [33, 35, 67],
  [33, 35, 90],
  [33, 35, 91],
  [33, 41, 98],
  [33, 41, 99],
  [33, 66, 90],
  [33, 66, 98],
  [33, 67, 91],
  [33, 67, 99],
  [33, 90, 91],
  [33, 98, 99],
  [34, 42, 100],
  [34, 42, 101],
  [34, 64, 88],
  [34, 64, 100],
  [34, 65, 89],
  [34, 65, 101],
  [34, 88, 89],
  [34, 100, 101],
  [35, 43, 102],
  [35, 43, 103],
  [35, 66, 90],
  [35, 66, 102],
  [35, 67, 91],
  [35, 67, 103],
  [35, 90, 91],
  [35, 102, 103],
  [36, 38, 68],
  [36, 38, 69],
  [36, 38, 92],
  [36, 38, 93],
  [36, 44, 96],
  [36, 44, 97],
  [36, 68, 92],
  [36, 68, 96],
  [36, 69, 93],
  [36, 69, 97],
  [36, 92, 93],
  [36, 96, 97],
  [37, 39, 70],
  [37, 39, 71],
  [37, 39, 94],
  [37, 39, 95],
  [37, 45, 98],
  [37, 45, 99],
  [37, 70, 94],
  [37, 70, 98],
  [37, 71, 95],
  [37, 71, 99],
  [37, 94, 95],
  [37, 98, 99],
  [38, 46, 100],
  [38, 46, 101],
  [38, 68, 92],
  [38, 68, 100],
  [38, 69, 93],
  [38, 69, 101],
  [38, 92, 93],
  [38, 100, 101],
  [39, 47, 102],
  [39, 47, 103],
  [39, 70, 94],
  [39, 70, 102],
  [39, 71, 95],
  [39, 71, 103],
  [39, 94, 95],
  [39, 102, 103],
  [40, 44, 96],
  [40, 44, 97],
  [40, 44, 104],
  [40, 44, 105],
  [40, 72, 73],
  [40, 72, 104],
  [40, 73, 105],
  [40, 96, 97],
  [40, 96, 104],
  [40, 97, 105],
  [41, 45, 98],
  [41, 45, 99],
  [41, 45, 106],
  [41, 45, 107],
  [41, 72, 73],
  [41, 72, 106],
  [41, 73, 107],
  [41, 98, 99],
  [41, 98, 106],
  [41, 99, 107],
  [42, 46, 100],
  [42, 46, 101],
  [42, 46, 108],
  [42, 46, 109],
  [42, 74, 75],
  [42, 74, 108],
  [42, 75, 109],
  [42, 100, 101],
  [42, 100, 108],
  [42, 101, 109],
  [43, 47, 102],
  [43, 47, 103],
  [43, 47, 110],
  [43, 47, 111],
  [43, 74, 75],
  [43, 74, 110],
  [43, 75, 111],
  [43, 102, 103],
  [43, 102, 110],
  [43, 103, 111],
  [44, 76, 77],
  [44, 76, 104],
  [44, 77, 105],
  [44, 96, 97],
  [44, 96, 104],
  [44, 97, 105],
  [45, 76, 77],
  [45, 76, 106],
  [45, 77, 107],
  [45, 98, 99],
  [45, 98, 106],
  [45, 99, 107],
  [46, 78, 79],
  [46, 78, 108],
  [46, 79, 109],
  [46, 100, 101],
  [46, 100, 108],
  [46, 101, 109],
  [47, 78, 79],
  [47, 78, 110],
  [47, 79, 111],
  [47, 102, 103],
  [47, 102, 110],
  [47, 103, 111],
  [48, 52, 104],
  [48, 52, 106],
  [48, 52, 112],
  [48, 52, 114],
  [48, 56, 72],
  [48, 56, 80],
  [48, 56, 82],
  [48, 72, 104],
  [48, 72, 106],
  [48, 80, 82],
  [48, 80, 112],
  [48, 82, 114],
  [48, 104, 106],
  [48, 104, 112],
  [48, 106, 114],
  [49, 53, 105],
  [49, 53, 107],
  [49, 53, 113],
  [49, 53, 115],
  [49, 57, 73],
  [49, 57, 81],
  [49, 57, 83],
  [49, 73, 105],
  [49, 73, 107],
  [49, 81, 83],
  [49, 81, 113],
  [49, 83, 115],
  [49, 105, 107],
  [49, 105, 113],
  [49, 107, 115],
  [50, 54, 108],
  [50, 54, 110],
  [50, 54, 116],
  [50, 54, 118],
  [50, 58, 74],
  [50, 58, 80],
  [50, 58, 82],
  [50, 74, 108],
  [50, 74, 110],
  [50, 80, 82],
  [50, 80, 116],
  [50, 82, 118],
  [50, 108, 110],
  [50, 108, 116],
  [50, 110, 118],
  [51, 55, 109],
  [51, 55, 111],
  [51, 55, 117],
  [51, 55, 119],
  [51, 59, 75],
  [51, 59, 81],
  [51, 59, 83],
  [51, 75, 109],
  [51, 75, 111],
  [51, 81, 83],
  [51, 81, 117],
  [51, 83, 119],
  [51, 109, 111],
  [51, 109, 117],
  [51, 111, 119],
  [52, 60, 76],
  [52, 60, 84],
  [52, 60, 86],
  [52, 76, 104],
  [52, 76, 106],
  [52, 84, 86],
  [52, 84, 112],
  [52, 86, 114],
  [52, 104, 106],
  [52, 104, 112],
  [52, 106, 114],
  [53, 61, 77],
  [53, 61, 85],
  [53, 61, 87],
  [53, 77, 105],
  [53, 77, 107],
  [53, 85, 87],
  [53, 85, 113],
  [53, 87, 115],
  [53, 105, 107],
  [53, 105, 113],
  [53, 107, 115],
  [54, 62, 78],
  [54, 62, 84],
  [54, 62, 86],
  [54, 78, 108],
  [54, 78, 110],
  [54, 84, 86],
  [54, 84, 116],
  [54, 86, 118],
  [54, 108, 110],
  [54, 108, 116],
  [54, 110, 118],
  [55, 63, 79],
  [55, 63, 85],
  [55, 63, 87],
  [55, 79, 109],
  [55, 79, 111],
  [55, 85, 87],
  [55, 85, 117],
  [55, 87, 119],
  [55, 109, 111],
  [55, 109, 117],
  [55, 111, 119],
  [56, 58, 80],
  [56, 58, 82],
  [56, 58, 88],
  [56, 58, 90],
  [56, 80, 82],
  [56, 80, 88],
  [56, 82, 90],
  [57, 59, 81],
  [57, 59, 83],
  [57, 59, 89],
  [57, 59, 91],
  [57, 81, 83],
  [57, 81, 89],
  [57, 83, 91],
  [58, 80, 82],
  [58, 80, 88],
  [58, 82, 90],
  [59, 81, 83],
  [59, 81, 89],
  [59, 83, 91],
  [60, 62, 84],
  [60, 62, 86],
  [60, 62, 92],
  [60, 62, 94],
  [60, 84, 86],
  [60, 84, 92],
  [60, 86, 94],
  [61, 63, 85],
  [61, 63, 87],
  [61, 63, 93],
  [61, 63, 95],
  [61, 85, 87],
  [61, 85, 93],
  [61, 87, 95],
  [62, 84, 86],
  [62, 84, 92],
  [62, 86, 94],
  [63, 85, 87],
  [63, 85, 93],
  [63, 87, 95],
  [64, 68, 96],
  [64, 68, 100],
  [64, 68, 112],
  [64, 68, 116],
  [64, 80, 88],
  [64, 80, 112],
  [64, 80, 116],
  [64, 96, 112],
  [64, 100, 116],
  [64, 112, 116],
  [65, 69, 97],
  [65, 69, 101],
  [65, 69, 113],
  [65, 69, 117],
  [65, 81, 89],
  [65, 81, 113],
  [65, 81, 117],
  [65, 97, 113],
  [65, 101, 117],
  [65, 113, 117],
  [66, 70, 98],
  [66, 70, 102],
  [66, 70, 114],
  [66, 70, 118],
  [66, 82, 90],
  [66, 82, 114],
  [66, 82, 118],
  [66, 98, 114],
  [66, 102, 118],
  [66, 114, 118],
  [67, 71, 99],
  [67, 71, 103],
  [67, 71, 115],
  [67, 71, 119],
  [67, 83, 91],
  [67, 83, 115],
  [67, 83, 119],
  [67, 99, 115],
  [67, 103, 119],
  [67, 115, 119],
  [68, 84, 92],
  [68, 84, 112],
  [68, 84, 116],
  [68, 96, 112],
  [68, 100, 116],
  [68, 112, 116],
  [69, 85, 93],
  [69, 85, 113],
  [69, 85, 117],
  [69, 97, 113],
  [69, 101, 117],
  [69, 113, 117],
  [70, 86, 94],
  [70, 86, 114],
  [70, 86, 118],
  [70, 98, 114],
  [70, 102, 118],
  [70, 114, 118],
  [71, 87, 95],
  [71, 87, 115],
  [71, 87, 119],
  [71, 99, 115],
  [71, 103, 119],
  [71, 115, 119],
  [72, 104, 106],
  [73, 105, 107],
  [74, 108, 110],
  [75, 109, 111],
  [76, 104, 106],
  [77, 105, 107],
  [78, 108, 110],
  [79, 109, 111],
  [80, 112, 116],
  [81, 113, 117],
  [82, 114, 118],
  [83, 115, 119],
  [84, 112, 116],
  [85, 113, 117],
  [86, 114, 118],
  [87, 115, 119],
  [96, 104, 112],
  [97, 105, 113],
  [98, 106, 114],
  [99, 107, 115],
  [100, 108, 116],
  [101, 109, 117],
  [102, 110, 118],
  [103, 111, 119],
];
const polygons3DTriangle = [
  [39, 56, 55],
  [71, 39, 55],
  [71, 73, 55],
  [40, 73, 55],
  [40, 56, 55],
  [39, 56, 72],
  [74, 56, 72],
  [74, 56, 40],
  [74, 42, 40],
  [73, 42, 40],
  [73, 42, 57],
  [73, 71, 57],
  [41, 71, 57],
  [41, 71, 39],
  [41, 72, 39],
  [41, 58, 57],
  [41, 58, 72],
  [42, 57, 58],
  [42, 58, 74],
  [72, 58, 74],
  [53, 19, 20],
  [53, 36, 20],
  [53, 36, 11],
  [53, 35, 11],
  [53, 35, 19],
  [27, 35, 19],
  [27, 61, 19],
  [8, 61, 19],
  [8, 61, 21],
  [29, 61, 21],
  [29, 61, 27],
  [20, 19, 8],
  [20, 36, 28],
  [20, 28, 62],
  [30, 28, 62],
  [20, 8, 62],
  [62, 30, 22],
  [62, 8, 22],
  [21, 8, 22],
  [11, 36, 32],
  [64, 36, 32],
  [64, 36, 28],
  [64, 32, 24],
  [64, 12, 24],
  [64, 12, 28],
  [30, 12, 28],
  [32, 16, 24],
  [35, 11, 31],
  [51, 11, 32],
  [51, 11, 31],
  [51, 15, 31],
  [51, 15, 16],
  [51, 16, 32],
  [23, 15, 31],
  [63, 35, 31],
  [63, 35, 27],
  [63, 13, 27],
  [63, 13, 23],
  [63, 23, 31],
  [27, 29, 13],
  [65, 29, 37],
  [21, 29, 37],
  [13, 29, 65],
  [13, 25, 65],
  [33, 37, 65],
  [25, 33, 65],
  [23, 13, 25],
  [25, 33, 17],
  [59, 25, 17],
  [23, 59, 25],
  [23, 59, 15],
  [9, 59, 17],
  [9, 59, 15],
  [9, 16, 15],
  [9, 17, 18],
  [9, 60, 18],
  [26, 60, 18],
  [26, 60, 24],
  [16, 60, 9],
  [16, 60, 24],
  [24, 26, 12],
  [66, 26, 12],
  [66, 26, 34],
  [18, 26, 34],
  [12, 66, 30],
  [38, 66, 30],
  [38, 22, 30],
  [66, 34, 38],
  [10, 34, 38],
  [52, 34, 18],
  [52, 17, 18],
  [52, 17, 33],
  [52, 10, 33],
  [52, 10, 34],
  [37, 10, 33],
  [37, 54, 10],
  [37, 54, 21],
  [22, 54, 21],
  [22, 54, 38],
  [54, 10, 38],
];

const polygons3DPentagon = [
  [69, 7, 46, 0, 70],
  [3, 47, 49, 7, 69],
  [47, 1, 67, 5, 49],
  [1, 43, 2, 68, 67],
  [2, 48, 50, 6, 68],
  [48, 4, 70, 0, 50],
  [44, 3, 69, 70, 4],
  [1, 47, 3, 44, 43],
  [2, 43, 44, 4, 48],
  [5, 67, 68, 6, 45],
  [46, 45, 6, 50, 0],
  [49, 5, 45, 46, 7],
];

const Cell600Analog = ({
  verticesArray,
  dimensionOfFigure,
  displayEdges,
  displayVertices,
  onWheel,
  onMouseOver,
  onMouseLeave,
  displayFaces,
}) => {
  if (!modified) {
    let linesArray = [];
    const edgeLength = Math.round((2 / 1.618) * 80);

    for (let i = 0; i < verticesArray.length; i++) {
      for (let j = i; j < verticesArray.length; j++) {
        if (i !== j) {
          let length = 0;
          for (let k = 0; k < dimensionOfFigure; k++) {
            length += (verticesArray[j][k] - verticesArray[i][k]) ** 2;
          }
          length = Math.round(length ** (1 / 2));

          if (+dimensionOfFigure > 2) {
            if (length === edgeLength || length === edgeLength - 1) {
              linesArray.push([i, j]);
            }
          } else if (+dimensionOfFigure === 2) {
            if (length === 94 || length === 98) {
              linesArray.push([i, j]);
            }
          }
        }
      }
    }

    if (+dimensionOfFigure === 2) {
      linesArray = [
        [0, 38],
        [0, 42],
        [1, 37],
        [1, 41],
        [2, 37],
        [2, 42],
        [3, 38],
        [3, 41],
        [4, 15],
        [4, 16],
        [5, 13],
        [5, 14],
        [6, 22],
        [6, 24],
        [7, 21],
        [7, 23],
        [8, 13],
        [8, 14],
        [8, 15],
        [8, 16],
        [8, 21],
        [8, 22],
        [8, 23],
        [8, 24],
        [9, 17],
        [9, 35],
        [10, 18],
        [10, 35],
        [11, 19],
        [11, 36],
        [12, 20],
        [12, 36],
        [13, 14],
        [15, 16],
        [17, 19],
        [17, 43],
        [18, 20],
        [18, 44],
        [19, 43],
        [20, 44],
        [21, 23],
        [22, 24],
        [25, 26],
        [25, 29],
        [25, 31],
        [26, 29],
        [26, 32],
        [27, 28],
        [27, 30],
        [27, 33],
        [28, 30],
        [28, 34],
        [29, 30],
        [29, 39],
        [29, 40],
        [30, 39],
        [30, 40],
        [31, 39],
        [32, 40],
        [33, 39],
        [34, 40],
        [35, 43],
        [35, 44],
        [36, 43],
        [36, 44],
        [43, 44],
      ];
    }

    const amountOfLines = linesArray.length;
    let ids = 0;
    const lines = [];

    for (let i = 0; i < amountOfLines; i++) {
      lines.push(ids);
      ids += 1;
    }

    const saveLines = [];

    lines.forEach((el, index) => {
      const vertex1 = linesArray[index][0];
      const vertex2 = linesArray[index][1];
      saveLines.push([vertex1, vertex2]);
    });

    setLinesArray(saveLines);
  }

  useEffect(() => {
    if (!modified) {
      if (+dimensionOfFigure === 3) {
        setPolygonsArray([...polygons3DPentagon, ...polygons3DTriangle]);
      } else if (+dimensionOfFigure > 3) {
        setPolygonsArray([...polygons]);
      } else if (+dimensionOfFigure < 3) {
        setPolygonsArray([]);
      }
    }
  }, [dimensionOfFigure, modified]);

  // useMemo(() => {
  //   function get3FacesArray(verticesArray, linesArray) {
  //     const facesArray = [];
  //     let percent = 0;

  //     for (let i = 0; i < verticesArray.length; i++) {
  //       percent += (100 / verticesArray.length);
  //       console.clear();
  //       console.log(percent + "% - 3")
  //       for (let j = i + 1; j < verticesArray.length; j++) {
  //         if (linesArray.some(([a, b]) => (a === i && b === j) || (a === j && b === i))) {
  //           for (let k = i + 1; k < verticesArray.length; k++) {
  //             if (
  //               linesArray.some(([a, b]) => (a === j && b === k) || (a === k && b === j)) &&
  //               linesArray.some(([a, b]) => (a === k && b === i) || (a === i && b === k))
  //             ) {
  //               facesArray.push([i, j, k]);
  //             }
  //           }
  //         }
  //       }
  //     }
  //     return facesArray;
  //   }

  //   function get5FacesArray(verticesArray, linesArray) {
  //     const facesArray = [];
  //     let percent = 0;

  //     for (let i = 0; i < verticesArray.length; i++) {
  //       percent += (100 / verticesArray.length);
  //       console.clear();
  //       console.log(percent + "% - 5")
  //       for (let j = i + 1; j < verticesArray.length; j++) {
  //         if (linesArray.some(([a, b]) => (a === i && b === j) || (a === j && b === i))) {
  //           for (let k = i + 1; k < verticesArray.length; k++) {
  //             if (linesArray.some(([a, b]) => (a === j && b === k) || (a === k && b === j))) {
  //               for (let l = i + 1; l < verticesArray.length; l++) {
  //                 if (linesArray.some(([a, b]) => (a === k && b === l) || (a === l && b === k))) {
  //                   for (let m = i + 1; m < verticesArray.length; m++) {
  //                     if (
  //                       linesArray.some(([a, b]) => (a === l && b === m) || (a === m && b === l)) &&
  //                       linesArray.some(([a, b]) => (a === m && b === i) || (a === i && b === m))
  //                     ) {
  //                       facesArray.push([i, j, k, l, m]);
  //                     }
  //                   }
  //                 }
  //               }
  //             }
  //           }
  //         }
  //       }
  //     }
  //     return facesArray;
  //   }


  //   function get6FacesArray(verticesArray, linesArray) {
  //     const hexArray = [];

  //     let percent = 0;
  //     for (let i = 0; i < verticesArray.length; i++) {
  //       percent += (100 / verticesArray.length);
  //       console.clear();
  //       console.log(percent + "% - 6")

  //       for (let j = i + 1; j < verticesArray.length; j++) {
  //         if (linesArray.some(([a, b]) => (a === i && b === j) || (a === j && b === i))) {
  //           for (let k = i + 1; k < verticesArray.length; k++) {
  //             if (linesArray.some(([a, b]) => (a === j && b === k) || (a === k && b === j))) {
  //               for (let l = i + 1; l < verticesArray.length; l++) {
  //                 if (linesArray.some(([a, b]) => (a === k && b === l) || (a === l && b === k))) {
  //                   for (let m = i + 1; m < verticesArray.length; m++) {
  //                     if (linesArray.some(([a, b]) => (a === l && b === m) || (a === m && b === l))) {
  //                       for (let n = i + 1; n < verticesArray.length; n++) {
  //                         if (
  //                           linesArray.some(([a, b]) => (a === m && b === n) || (a === n && b === m)) &&
  //                           linesArray.some(([a, b]) => (a === n && b === i) || (a === i && b === n))
  //                         ) {
  //                           hexArray.push([i, j, k, l, m, n]);
  //                         }
  //                       }
  //                     } else { continue }
  //                   }
  //                 } else { continue }
  //               }
  //             } else { continue }
  //           }
  //         } else { continue }
  //       }
  //     }

  //     return hexArray;
  //   }

  //   function get4FacesArray(verticesArray, linesArray) {
  //     const quadsArray = [];

  //     let percent = 0;
  //     for (let i = 0; i < verticesArray.length; i++) {
  //       percent += (100 / verticesArray.length);
  //       console.clear();
  //       console.log(percent + "% - 4")
  //       for (let j = i + 1; j < verticesArray.length; j++) {
  //         if (linesArray.some(([a, b]) => (a === i && b === j) || (a === j && b === i))) {
  //           for (let k = i + 1; k < verticesArray.length; k++) {
  //             if (linesArray.some(([a, b]) => (a === j && b === k) || (a === k && b === j))) {
  //               for (let l = i + 1; l < verticesArray.length; l++) {
  //                 if (
  //                   linesArray.some(([a, b]) => (a === k && b === l) || (a === l && b === k)) &&
  //                   linesArray.some(([a, b]) => (a === l && b === i) || (a === i && b === l))
  //                 ) {
  //                   quadsArray.push([i, j, k, l]);
  //                 }
  //               }
  //             }
  //           }
  //         }
  //       }
  //     }

  //     return quadsArray;
  //   }

  //   const clearRepeats = (arr) => {
  //     const res = [];
  //     const test = []
  //     arr.forEach(element => {
  //       const copyElement = [...element]
  //       if (!test.includes(JSON.stringify(copyElement.sort((a, b) => a - b)))) {
  //         let uniq = true;
  //         element.forEach(el => {
  //           if (element.indexOf(el) !== element.lastIndexOf(el)) uniq = false;
  //         })
  //         if (uniq) {
  //           res.push(element);
  //           test.push(JSON.stringify(copyElement));
  //         }
  //       }
  //     });
  //     return res;
  //   };


  //   function get8FacesArray(verticesArray, linesArray) {
  //     const facesArray = [];
  //     let percent = 0;

  //     for (let i = 0; i < verticesArray.length; i++) {
  //       percent += (100 / verticesArray.length);
  //       console.clear();
  //       console.log(percent + "%")
  //       for (let j = i + 1; j < verticesArray.length; j++) {
  //         if (linesArray.some(([a, b]) => (a === i && b === j) || (a === j && b === i))) {
  //           for (let k = i + 1; k < verticesArray.length; k++) {
  //             if (linesArray.some(([a, b]) => (a === j && b === k) || (a === k && b === j))) {
  //               for (let l = i + 1; l < verticesArray.length; l++) {
  //                 if (linesArray.some(([a, b]) => (a === k && b === l) || (a === l && b === k))) {
  //                   for (let m = i + 1; m < verticesArray.length; m++) {
  //                     if (linesArray.some(([a, b]) => (a === l && b === m) || (a === m && b === l))) {
  //                       for (let n = i + 1; n < verticesArray.length; n++) {
  //                         if (linesArray.some(([a, b]) => (a === m && b === n) || (a === n && b === m))) {
  //                           for (let o = i + 1; o < verticesArray.length; o++) {
  //                             if (linesArray.some(([a, b]) => (a === n && b === o) || (a === o && b === n))) {
  //                               for (let p = i + 1; p < verticesArray.length; p++) {
  //                                 if (
  //                                   linesArray.some(([a, b]) => (a === o && b === p) || (a === p && b === o)) &&
  //                                   linesArray.some(([a, b]) => (a === p && b === i) || (a === i && b === p))
  //                                 ) {
  //                                   facesArray.push([i, j, k, l, m, n, o, p]);
  //                                 }
  //                               }
  //                             }
  //                           }
  //                         }
  //                       }
  //                     }
  //                   }
  //                 }
  //               }
  //             }
  //           }
  //         }
  //       }
  //     }
  //     return facesArray;
  //   }

  //   polygons = [
  //     ...clearRepeats(polygons),
  //     ...clearRepeats(get3FacesArray(verticesArray, linesArray)),
  //     ...clearRepeats(get4FacesArray(verticesArray, linesArray)),
  //     ...clearRepeats(get5FacesArray(verticesArray, linesArray)),
  //     ...clearRepeats(get6FacesArray(verticesArray, linesArray)),
  //     ...clearRepeats(get8FacesArray(verticesArray, linesArray)),
  //   ];
  // }

  // const clearExtra = () => {
  //   let progress = 0;
  //   const res = polygons4.filter((el, index) => {
  //     progress += (100 / polygons4.length);
  //     console.clear();
  //     console.log(progress + "%")
  //     let status = true;
  //     for (let i = 0; i < polygons3.length; i++) {
  //       if (polygons3[i].length === 3) {
  //         if (el.includes(polygons3[i][0]) && el.includes(polygons3[i][1]) && el.includes(polygons3[i][2])) {
  //           status = false;
  //           break;
  //         }
  //       }
  //     }

  //     return status;
  //   })

  //   return res;
  // }

  //   console.log(polygons)
  // }, []);

  return (
    <svg
      width="600"
      height="400"
      className="svg"
      onWheel={onWheel}
      onMouseEnter={onMouseOver}
      onMouseLeave={onMouseLeave}
    >
      {displayFaces && +dimensionOfFigure >= 2
        ? polygonsArray.map((arr, index) => (
            <polygon
              data-points={JSON.stringify(arr)}
              key={index}
              points="0 0, 0 0, 0 0, 0 0"
              fill={`rgba(255,255, 255, 0.3)`}
              className="polygon"
              data-type={arr.length}
            />
          ))
        : null}
      {displayEdges &&
        _linesArray.map((id, index) => {
          let vertex1 = 0;
          let vertex2 = 0;

          vertex1 = id[0];
          vertex2 = id[1];
          return (
            <line
              key={index}
              x1="200"
              y1="200"
              x2="400"
              y2="200"
              stroke="white"
              id={`line${index}`}
              className="line"
              vertex1={vertex1}
              vertex2={vertex2}
            />
          );
        })}

      {displayVertices
        ? verticesArray.map((item, index) => (
            <circle
              onClick={() => {
                console.log(verticesArray[index], index);
              }}
              key={index}
              cx="300"
              cy="200"
              r="2"
              fill="white"
              id={`circle${index}`}
              className="circle"
              onContextMenu={(e) => {
                e.preventDefault();
                e.target.style.display = "none";
              }}
            />
          ))
        : null}
    </svg>
  );
};

export default Cell600Analog;
